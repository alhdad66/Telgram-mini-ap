<!DOCTYPE html>
<html lang="ar"> <!-- Changed lang to Arabic for better default accessibility -->
<head>
  <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title data-key="app_title">Premium Ad Reward System</title>
    
    <!-- Adsgram SDK -->
    <script src="https://sad.adsgram.ai/js/sad.min.js"></script>
    
    <!-- Telegram Mini Apps SDK -->
    <script src="https://telegram.org/js/telegram-web-app.js"></script>

    <!-- لا توجد حزم Firebase SDK هنا، تم نقلها إلى كتلة السكربت الموحدة في نهاية الجسم -->

    <style>
        :root {
            /* الألوان الأساسية والثانوية تم تغييرها إلى درجات الأخضر النابضة بالحياة */
            --primary: #00BF63; /* أخضر نابض بالحياة */
            --primary-dark: #008C4A; /* درجة أغمق للظلال */
            --secondary: #32CD32; /* أخضر ليموني، للمسة أكثر حيوية */
            --secondary-dark: #28A745; /* درجة أغمق للون الثانوي */
            
            --dark: #121212;
            --darker: #0a0a0a;
            --light: #f5f5f5;
            --gray: #2a2a2a;
            --card-bg: #1f1f1f;
            --gold: #ffd700;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background: linear-gradient(135deg, var(--darker), #1a1a2e);
            color: var(--light);
            min-height: 100vh;
            padding: 20px;
            display: flex;
            justify-content: center;
            align-items: center;
            position: relative;
            overflow-x: hidden;
        }
        
        body::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: 
                radial-gradient(circle at 10% 20%, rgba(0, 191, 99, 0.1) 0%, transparent 20%), /* معدل للأخضر */
                radial-gradient(circle at 90% 80%, rgba(50, 205, 50, 0.1) 0%, transparent 20%); /* معدل للأخضر */
            z-index: -1;
        }
        
        .container {
            width: 100%;
            max-width: 500px;
            background: var(--card-bg);
            border-radius: 20px;
            overflow: hidden;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
            position: relative;
            border: 1px solid rgba(255, 255, 255, 0.05);
        }
        
        .header {
            /* تدرج الرأس معدل للأخضر */
            background: linear-gradient(90deg, var(--primary), var(--secondary));
            padding: 25px 20px;
            text-align: center;
            position: relative;
            overflow: hidden;
        }
        
        .header::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(45deg, 
                rgba(255,255,255,0.1) 0%,
                rgba(255,255,255,0) 50%,
                rgba(255,255,255,0.1) 100%);
            z-index: 1;
        }
        
        .header h1 {
            font-size: 28px;
            font-weight: 700;
            text-shadow: 0 2px 4px rgba(0,0,0,0.3);
            position: relative;
            z-index: 2;
        }
        
        .content {
            padding: 25px;
        }
        
        .user-info {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 15px;
            padding: 15px;
            margin-bottom: 20px;
            text-align: center;
            border: 1px solid rgba(255, 255, 255, 0.1);
            position: relative;
        }
        
        .user-info p {
            margin: 5px 0;
            font-size: 14px;
        }
        
        .stats {
            display: flex;
            justify-content: space-around;
            margin: 20px 0;
            text-align: center;
        }
        
        .stat-card {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 15px;
            padding: 15px 10px;
            width: 45%;
            border: 1px solid rgba(255, 255, 255, 0.1);
            position: relative;
        }
        
        .stat-card h3 {
            font-size: 14px;
            margin-bottom: 5px;
            color: #aaa;
        }
        
        .stat-card .value {
            font-size: 24px;
            font-weight: 700;
            color: var(--primary); 
        }
        
        .progress-container {
            margin: 25px 0;
            text-align: center;
        }
        
        .progress-label {
            margin-bottom: 10px;
            display: flex;
            justify-content: space-between;
            font-size: 14px;
        }
        
        .progress-bar {
            height: 12px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            overflow: hidden;
            position: relative;
        }
        
        .progress-fill {
            height: 100%;
            /* شريط التقدم معدل للأخضر */
            background: linear-gradient(90deg, var(--primary), var(--secondary)); 
            border-radius: 10px;
            width: 30%;
            transition: width 0.5s ease;
        }
        
        .buttons {
            display: flex;
            flex-direction: column;
            gap: 15px;
            margin: 25px 0;
        }
        
        /* أنماط زر ثلاثي الأبعاد - معدلة للأخضر */
        .btn-3d {
            position: relative;
            padding: 16px 20px;
            border: none;
            border-radius: 15px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            color: white;
            text-align: center;
            transition: all 0.2s ease;
            transform-style: preserve-3d;
            perspective: 500px;
            /* ظل الصندوق يستخدم primary-dark للعمق */
            box-shadow: 
                0 8px 0 var(--primary-dark), 
                0 15px 20px rgba(0, 0, 0, 0.3);
            overflow: hidden;
            z-index: 1;
        }
        
        .btn-3d::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            /* خلفية متدرجة لسطح الزر */
            background: linear-gradient(45deg, var(--primary), var(--secondary)); 
            z-index: -1;
            transition: all 0.3s ease;
        }
        
        .btn-3d::after {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            /* تأثير لامع عند التمرير */
            background: linear-gradient(90deg, 
                transparent, 
                rgba(255, 255, 255, 0.2), 
                transparent);
            transition: all 0.5s ease;
            z-index: -1;
        }
        
        .btn-3d:hover {
            transform: translateY(4px);
            /* ضبط الظل عند التمرير */
            box-shadow: 
                0 4px 0 var(--primary-dark),
                0 8px 10px rgba(0, 0, 0, 0.3);
        }
        
        .btn-3d:hover::after {
            left: 100%;
        }
        
        .btn-3d:active {
            transform: translateY(8px);
            /* تسطيح الظل عند النقر */
            box-shadow: 
                0 0 0 var(--primary-dark),
                0 2px 5px rgba(0, 0, 0, 0.3);
        }
        
        .btn-secondary {
            /* يستخدم الزر الثانوي secondary-dark للظل */
            box-shadow: 
                0 8px 0 var(--secondary-dark), 
                0 15px 20px rgba(0, 0, 0, 0.3);
        }
        
        .btn-secondary::before {
            /* تدرج خلفية الزر الثانوي */
            background: linear-gradient(45deg, var(--secondary), var(--primary-dark)); 
        }
        
        .btn-blue { /* هذا الصنف الآن هو في الأساس نفس btn-3d بسبب الألوان الأساسية/الثانوية المشتركة */
            box-shadow: 
                0 8px 0 var(--primary-dark), 
                0 15px 20px rgba(0, 0, 0, 0.3);
        }
        
        .btn-blue::before {
            background: linear-gradient(45deg, var(--primary), var(--secondary)); 
        }
        
        .website-section {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 15px;
            padding: 20px;
            margin-top: 20px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            text-align: center;
        }
        
        .website-section h3 {
            color: var(--secondary); 
            margin-bottom: 15px;
            font-size: 18px;
        }
        
        .footer {
            text-align: center;
            padding: 15px;
            color: #777;
            font-size: 12px;
            border-top: 1px solid rgba(255, 255, 255, 0.05);
        }
        
        .firebase-logo {
            display: inline-block;
            margin-top: 10px;
            font-size: 10px;
            background: rgba(255, 152, 0, 0.1);
            padding: 4px 8px;
            border-radius: 4px;
            color: #ffa726;
        }
        
        .ad-container {
            background: rgba(0, 0, 0, 0.2);
            border-radius: 15px;
            padding: 20px;
            margin: 20px 0;
            text-align: center;
        }
        
        .ad-label {
            font-size: 12px;
            color: #aaa;
            margin-bottom: 10px;
        }
        
        /* الرسوم المتحركة لمشاهدة الإعلانات */
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }
        
        .pulse {
            animation: pulse 0.5s ease;
        }
        
        .ad-notification {
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 15px 30px;
            border-radius: 10px;
            z-index: 1000;
            display: none;
            font-weight: bold;
            box-shadow: 0 5px 15px rgba(0,0,0,0.5);
        }
        
        /* تصميم متجاوب */
        @media (max-width: 480px) {
            .container {
                border-radius: 15px;
            }
            
            .header {
                padding: 20px 15px;
            }
            
            .content {
                padding: 20px;
            }
        }
        
        /* أنماط محدد اللغة - زر نشط معدل للأخضر */
        .language-selector {
            position: absolute;
            top: 15px; 
            right: 15px; 
            display: flex;
            gap: 5px;
            z-index: 999; 
            background-color: rgba(0, 0, 0, 0.3); 
            border-radius: 10px; 
            padding: 5px; 
            backdrop-filter: blur(5px); 
        }
        .language-selector button {
            width: auto;
            padding: 5px 10px;
            font-size: 13px;
            background-color: rgba(255, 255, 255, 0.1); 
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 8px; 
            cursor: pointer;
            min-width: 30px;
            transition: all 0.2s ease; 
        }
        .language-selector button.active {
            background: linear-gradient(45deg, var(--primary), var(--secondary)); 
            border-color: var(--primary); 
        }
        .language-selector button:hover:not(.active) {
            background-color: rgba(255, 255, 255, 0.2); 
        }

        /* أنماط قسم السحب - تدرج زر معدل للأخضر */
        .withdraw-section {
            margin-top: 20px;
            display: none;
            padding: 25px; 
            background-color: rgba(255, 255, 255, 0.05); 
            border-radius: 15px; 
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        .withdraw-section h3 {
            color: var(--secondary); 
            margin-bottom: 5px; 
            font-size: 20px;
            font-weight: 600;
        }
        .withdraw-section .warning-message { 
            font-size: 13px;
            color: #FFC107; 
            margin-bottom: 15px;
            line-height: 1.4;
            white-space: pre-wrap; 
        }
        .withdraw-section input, 
        .withdraw-section select { 
            width: 100%;
            padding: 12px;
            margin: 10px 0; 
            border-radius: 10px; 
            /* حدود الإدخال معدلة للأخضر */
            border: 1px solid var(--primary); 
            background-color: var(--dark); 
            color: var(--light);
            font-size: 14px;
        }
        .withdraw-section input::placeholder {
            color: #aaa;
        }
        .withdraw-section input:focus, 
        .withdraw-section select:focus {
            border-color: var(--gold); 
            outline: none;
            box-shadow: 0 0 0 3px rgba(255, 215, 0, 0.2);
        }
        .withdraw-section button {
            /* تدرج زر السحب معدل للأخضر */
            background: linear-gradient(90deg, var(--primary), var(--secondary)); 
            width: 100%;
            padding: 14px; 
            font-size: 16px;
            font-weight: 600;
            margin-top: 20px; 
            border-radius: 15px; 
            cursor: pointer;
            color: white; 
            border: none; 
            box-shadow: 0 8px 0 var(--primary-dark), 0 15px 20px rgba(0, 0, 0, 0.3);
            transition: all 0.2s ease;
        }
        .withdraw-section button:hover {
            transform: translateY(4px);
            box-shadow: 0 4px 0 var(--primary-dark), 0 8px 10px rgba(0, 0, 0, 0.3);
            /* تدرج التمرير معدل للأخضر */
            background: linear-gradient(90deg, var(--secondary), var(--primary)); 
        }
        .withdraw-section button:active {
            transform: translateY(8px);
            box-shadow: 0 0 0 var(--primary-dark), 0 2px 5px rgba(0, 0, 0, 0.3);
        }

        /* أنماط قسم الإحالة */
        .referral-section {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 15px;
            padding: 20px;
            margin-top: 20px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            text-align: center;
        }
        .referral-section h3 {
            color: var(--secondary);
            margin-bottom: 15px;
            font-size: 18px;
        }
        .referral-link-container {
            background-color: var(--dark);
            border: 1px solid var(--primary);
            border-radius: 10px;
            padding: 10px;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            gap: 10px;
        }
        .referral-link-container input {
            flex-grow: 1;
            background: transparent;
            border: none;
            color: var(--light);
            font-size: 14px;
            padding: 0;
            cursor: text;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        .referral-link-container button {
            padding: 8px 12px;
            font-size: 14px;
            border-radius: 8px;
            cursor: pointer;
            color: white;
            border: none;
            background: linear-gradient(45deg, var(--secondary), var(--primary));
            transition: all 0.2s ease;
            box-shadow: 0 4px 0 var(--secondary-dark);
        }
        .referral-link-container button:hover {
            transform: translateY(2px);
            box-shadow: 0 2px 0 var(--secondary-dark);
        }
        .referral-stats {
            display: flex;
            justify-content: space-around;
            margin-top: 15px;
        }
        .referral-stat-item {
            text-align: center;
        }
        .referral-stat-item .value {
            font-size: 22px;
            font-weight: 700;
            color: var(--gold);
        }
        .referral-stat-item .label {
            font-size: 12px;
            color: #aaa;
        }

        /* أنماط قسم رؤية LLM */
        .llm-insight-section {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 15px;
            padding: 20px;
            margin-top: 20px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            text-align: center;
        }
        .llm-insight-section h3 {
            color: var(--secondary);
            margin-bottom: 15px;
            font-size: 18px;
        }
        .llm-insight-text {
            background-color: var(--darker);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            padding: 15px;
            min-height: 80px; /* ضمان مساحة للنص */
            text-align: left;
            font-size: 14px;
            line-height: 1.5;
            color: #ccc;
            overflow-y: auto; /* السماح بالتمرير إذا كان المحتوى طويلًا */
            max-height: 200px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .llm-insight-text.loading::after {
            content: '...';
            animation: dot-pulse 1s infinite steps(1, start);
        }
        @keyframes dot-pulse {
            0% { content: '.'; }
            33% { content: '..'; }
            66% { content: '...'; }
            100% { content: '.'; }
        }
    </style>
</head>
<body>
    <div class="ad-notification" id="ad-notification"></div>
    
    <div class="container">
        <!-- محدد اللغة -->
        <div class="language-selector">
            <button data-lang="ar" onclick="setLanguage('ar')">AR</button>
            <button data-lang="en" onclick="setLanguage('en')">EN</button>
            <button data-lang="ru" onclick="setLanguage('ru')">RU</button>
        </div>

        <div class="header">
            <h1 data-key="app_title">⛏️شغل المشاهده التلقائيه وادهب لي النوم 😴واستمتع بي الارباح🤫💵</h1>
        </div>
        
        <div class="content">
            <div class="user-info">
                <p data-key="earn_per_click_message">اربح 5 عملات pepe لكل نقرة🔥</p>
                <p data-key="min_withdrawal_message_static_general">السحب عن طريق FaucetPay من 10 عملات فقط ✅<br>السحب إلى أي محفظة أخرى من 100 عملة فقط ✅</p>
                <p id="user-id-display"></p> <!-- عرض معرف مستخدم تيليجرام -->
            </div>
            
            <div class="stats">
                <div class="stat-card">
                    <h3 data-key="watched_ads_label">الإعلانات المشاهدة</h3>
                    <div class="value" id="watched-ads">0</div>
                </div>
                <div class="stat-card">
                    <h3 data-key="earned_points_label">عملات Pepe المكتسبة</h3>
                    <div class="value" id="earned-points">0.00</div>
                </div>
            </div>
            
            <div class="stats"> 
                <div class="stat-card">
                    <h3 data-key="daily_limit_label">المشاهدات اليومية</h3>
                    <div class="value" id="daily-watched-ads">0 / 100</div>
                </div>
            </div>

            <div class="progress-container">
                <div class="progress-label">
                    <span data-key="progress_to_bonus">التقدم للمكافأة</span>
                    <span id="ads-progress">0%</span>
                </div>
                <div class="progress-bar">
                    <div class="progress-fill" id="progress-fill"></div>
                </div>
            </div>
            
            <div class="ad-container">
                <div class="ad-label" data-key="ad_type_label">إعلان Adsgram بيني</div>
                <div class="buttons">
                    <button class="btn-3d" id="watch-ad-btn" onclick="watchAd()" data-key="watch_ad_btn_with_points">شاهد إعلان (+10.00 عملة pepe)</button>
                    <button class="btn-3d btn-secondary" id="auto-ad-btn" onclick="startAutoAds()" data-key="auto_show_ads_btn">عرض الإعلانات تلقائياً</button>
                    <button class="btn-3d" id="stop-auto-btn" onclick="stopAutoAds()" data-key="stop_auto_ads_btn">إيقاف العرض التلقائي</button>
                    <button class="btn-3d btn-blue" id="show-withdraw-btn" onclick="showWithdrawForm()" data-key="withdraw_points_btn">سحب عملات Pepe</button>
                    <!-- زر جديد لرؤية أداء LLM -->
                    <button class="btn-3d btn-blue" id="get-insight-btn" onclick="getAdInsight()" data-key="get_ad_insight_btn">✨ رؤية أداء الإعلانات ✨</button>
                </div>
            </div>

            <!-- قسم جديد لرؤية أداء LLM -->
            <div class="llm-insight-section">
                <h3 data-key="llm_insight_title">رؤية أداء الإعلانات</h3>
                <div class="llm-insight-text" id="dogs-insight-text" data-key="llm_insight_placeholder">انقر على الزر أعلاه للحصول على رؤية حول أداء إعلاناتك.</div>
            </div>

            <!-- قسم نظام الإحالة -->
            <div class="referral-section">
                <h3 data-key="referral_title">نظام الإحالة</h3>
                <p data-key="referral_desc">ادع أصدقائك واكسب مكافآت!</p>
                <div class="referral-link-container">
                    <input type="text" id="referral-link" readonly value="Loading referral link...">
                    <button onclick="copyReferralLink()" data-key="copy_link_btn">نسخ الرابط</button>
                </div>
                <div class="referral-stats">
                    <div class="referral-stat-item">
                        <div class="value" id="referred-users-count">0</div>
                        <div class="label" data-key="referred_users_label">المستخدمون المدعوون</div>
                    </div>
                    <div class="referral-stat-item">
                        <div class="value" id="referral-bonus-earned">0.00</div>
                        <div class="label" data-key="referral_bonus_earned_label">مكافآت الإحالة</div>
                    </div>
                </div>
            </div>
            
            <div class="website-section">
                <h3 data-key="visit_channel_title">قم بزيارة قناتنا على تيليجرام</h3>
                <button class="btn-3d btn-blue" onclick="window.open('https://t.me/dogsarn', '_blank')" data-key="visit_channel_button">زيارة القناة</button>
            </div>
        </div>
        
        <div class="footer">
            <p data-key="footer_text">مؤمن بواسطة Firebase • جميع المعاملات محمية</p>
            <div class="firebase-logo">Firebase</div>
        </div>

        <!-- قسم السحب - تم نقله هنا ليتم إخفاؤه/إظهاره -->
        <div class="withdraw-section" id="withdraw-section">
            <h3 data-key="withdrawal_request_title">طلب السحب</h3>
            <p class="warning-message" data-key="withdrawal_warning">تنبيه 🙋🏻‍♂️
الحد الأدنى للسحب عن طريق FaucetPay هو 10 عملات pepe.
الحد الأدنى للسحب إلى أي محفظة أخرى هو 100 عملة pepe.
يرجى التأكد من إدخال عنوان محفظة صحيح لتلقي السحب بدون مشاكل (◍•ᴗ•◍)</p>
            <input type="number" id="withdraw-amount" data-key-placeholder="enter_points_placeholder" placeholder="أدخل الكمية لسحب عملات Pepe" />
            <select id="payment-method"> 
                <option value="faucetpay" data-key="faucetpay_option">FaucetPay</option>
                <option value="other_wallet" data-key="other_wallet_option">السحب إلى أي محفظة أخرى</option>
            </select>
            <input type="text" id="wallet-address" data-key-placeholder="wallet_address_placeholder" placeholder="أدخل عنوان المحفظة" /> 
            <button onclick="withdrawPoints()" data-key="withdraw_button">سحب</button>
            <p id="withdraw-status"></p>
        </div>
    </div>

    <!-- Adsgram SDK -->
    <script src="https://sad.adsgram.ai/js/sad.min.js"></script>

    <!-- سكربت Firebase الموحد ومنطق التطبيق -->
    <script type="module">
        // استيراد وحدات Firebase
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, doc, getDoc, setDoc, updateDoc, collection, query, where, addDoc, serverTimestamp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // الثوابت
        const POINTS_PER_AD = 10.00; // المكافأة لكل إعلان هي الآن 10.00 عملة Pepe
        const ADS_FOR_BONUS = 10; 
        const MIN_WITHDRAW_POINTS = 100; // الحد الأدنى للسحب للمحافظ الأخرى
        const MIN_WITHDRAW_POINTS_FAUCETPAY = 10; // الحد الأدنى للسحب لـ FaucetPay
        const DAILY_AD_LIMIT = 100; // الحد اليومي للإعلانات المشاهدة هو الآن 100
        const REFERRAL_BONUS_ADS_COUNT = 5; // عدد الإعلانات التي يجب أن يشاهدها المستخدم المحال للحصول على مكافأة المحيل
        const REFERRAL_BONUS_AMOUNT = 50.00; // مبلغ عملات Pepe لمكافأة المحيل
        const ADMIN_USER_ID = "-1002705355317"; // معرف محادثة مسؤول تيليجرام
        const BOT_TOKEN = "7509054222:AAFhFhVXFCOs4kXtHQBigGU2QeNamHX42LQ"; // توكن بوت تيليجرام
        const BOT_USERNAME = "ididkd46_bot"; // اسم مستخدم بوت تيليجرام الخاص بك (تم تركيبه هنا)

        // متغيرات الحالة (الآن متزامنة بشكل أساسي مع Firestore)
        let currentUserData = { // هيكل بيانات المستخدم
            telegramUserId: null,
            telegramUsername: 'AnonymousUser', // افتراضي إذا لم يكن من تطبيق تيليجرام المصغر
            earnedPoints: 0.00,
            watchedAdsCount: 0,
            dailyWatchedAdsCount: 0,
            lastWatchDate: '',
            referrerId: null, // معرف المستخدم الذي أحال هذا المستخدم
            referredUsersCount: 0, // عدد المستخدمين الذين أحالهم هذا المستخدم
            referralBonusEarned: 0.00, // إجمالي المكافأة المكتسبة من الإحالات
            isNewUser: true, // علامة للإعداد الأولي
            referredAdsWatched: 0, // عدد الإعلانات التي شاهدها المستخدم المحال (يتم تتبعها للمكافأة)
            hasReceivedReferralBonusForThisUser: false // علامة لضمان حصول المحيل على المكافأة مرة واحدة فقط لكل مستخدم محال
        };
        let autoAdInterval;
        
        // مثيلات Firebase
        let firebaseApp;
        let firebaseDb;
        let firebaseAuth;
        let firebaseCurrentUserId = null; // معرف مستخدم Firebase Auth
        let isFirebaseInitialized = false;

        // متغيرات Firebase - لا تعدل. يتم توفيرها بواسطة بيئة Canvas.
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
        const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

        // عناصر DOM
        const watchedAdsEl = document.getElementById('watched-ads');
        const earnedPointsEl = document.getElementById('earned-points');
        const dailyWatchedAdsEl = document.getElementById('daily-watched-ads'); 
        const adsProgressEl = document.getElementById('ads-progress');
        const progressFillEl = document.getElementById('progress-fill');
        const adNotificationEl = document.getElementById('ad-notification');
        const withdrawSectionEl = document.getElementById('withdraw-section');
        const withdrawStatusEl = document.getElementById('withdraw-status');
        const watchAdBtn = document.getElementById('watch-ad-btn');
        const autoAdBtn = document.getElementById('auto-ad-btn');
        const stopAutoBtn = document.getElementById('stop-auto-btn');
        const userIdDisplayEl = document.getElementById('user-id-display'); // لعرض معرف مستخدم تيليجرام
        // عناصر DOM لنظام الإحالة
        const referralLinkInput = document.getElementById('referral-link');
        const referredUsersCountEl = document.getElementById('referred-users-count');
        const referralBonusEarnedEl = document.getElementById('referral-bonus-earned');
        // عناصر DOM لرؤية LLM
        const getInsightBtn = document.getElementById('get-insight-btn');
        const dogsInsightTextEl = document.getElementById('dogs-insight-text');

        // --- منطق الترجمة ---
        const translations = {
            ar: {
                app_title: "⛏️شغل المشاهده التلقائيه وادهب لي النوم 😴واستمتع بي الارباح🤫💵",
                earn_per_click_message: "اربح 5 عملات pepe لكل نقرة🔥", 
                min_withdrawal_message_static_general: `السحب عن طريق FaucetPay من ${MIN_WITHDRAW_POINTS_FAUCETPAY} عملات فقط ✅\nالسحب إلى أي محفظة أخرى من ${MIN_WITHDRAW_POINTS} عملة فقط ✅`, 
                watched_ads_label: "الإعلانات المشاهدة",
                earned_points_label: "عملات Pepe المكتسبة", 
                daily_limit_label: "المشاهدات اليومية", 
                progress_to_bonus: "التقدم للمكافأة",
                ad_type_label: "إعلان Adsgram بيني",
                watch_ad_btn_with_points: `شاهد إعلان (+${POINTS_PER_AD.toFixed(2)} عملة pepe)`, 
                auto_show_ads_btn: "عرض الإعلانات تلقائياً",
                stop_auto_ads_btn: "إيقاف العرض التلقائي",
                withdraw_points_btn: "سحب عملات Pepe", 
                visit_channel_title: "قم بزيارة قناتنا على تيليجرام", 
                visit_channel_button: "زيارة القناة", 
                footer_text: "مؤمن بواسطة Firebase • جميع المعاملات محمية",
                withdrawal_request_title: "طلب السحب",
                withdrawal_warning: `تنبيه 🙋🏻‍♂️\nالحد الأدنى للسحب عن طريق FaucetPay هو ${MIN_WITHDRAW_POINTS_FAUCETPAY} عملات pepe.\nالحد الأدنى للسحب إلى أي محفظة أخرى هو ${MIN_WITHDRAW_POINTS} عملة pepe.\nيرجى التأكد من إدخال عنوان محفظة صحيح لتلقي السحب بدون مشاكل (◍•ᴗ•◍)`, 
                enter_points_placeholder: "أدخل الكمية لسحب عملات Pepe", 
                faucetpay_option: "FaucetPay",
                other_wallet_option: "السحب إلى أي محفظة أخرى",
                wallet_address_placeholder: "أدخل عنوان المحفظة",
                withdraw_button: "سحب",
                ad_loading: "جاري تحميل الإعلان... يرجى الانتظار",
                ad_completed_success: `اكتمل الإعلان! تمت إضافة ${POINTS_PER_AD.toFixed(2)} عملة pepe إلى حسابك`, 
                ad_failed: "فشل عرض الإعلان. يرجى المحاولة مرة أخرى.",
                auto_ads_started_notification: "بدأ العرض التلقائي للإعلانات. ستعمل الإعلانات كل 30 ثانية.",
                auto_ads_stopped_notification: "تم إيقاف العرض التلقائي للإعلانات.",
                daily_limit_reached: `لقد وصلت للحد الأقصى من المشاهدات اليومية (${DAILY_AD_LIMIT}). يرجى المحاولة غدًا.`, 
                min_withdraw_message: `الحد الأدنى للسحب عن طريق {methodName} هو {minAmount} عملة pepe.`, 
                insufficient_balance: `رصيدك غير كافٍ. لديك {earnedPoints} عملة pepe.`, 
                enter_wallet_address: "يرجى إدخال عنوان المحفظة.",
                withdrawal_success_message: 'تم إرسال طلب السحب بنجاح!',
                telegram_send_fail: `فشل إرسال الطلب: {error}`,
                telegram_connect_error: `خطأ في الاتصال بخدمة تيليجرام: {error}`,
                unknown_method: "طريقة غير معروفة:",
                // ترجمات نظام الإحالة
                referral_title: "نظام الإحالة",
                referral_desc: `ادع أصدقائك واكسب ${REFERRAL_BONUS_AMOUNT.toFixed(2)} عملة pepe عند مشاهدتهم أول ${REFERRAL_BONUS_ADS_COUNT} إعلان!`,
                copy_link_btn: "نسخ الرابط",
                copy_link_success: "تم نسخ رابط الإحالة!",
                referred_users_label: "المستخدمون المدعوون",
                referral_bonus_earned_label: "مكافآت الإحالة",
                user_id_display: "معرف المستخدم: {userId}",
                referral_link_loading: "جاري تحميل رابط الإحالة...",
                // ترجمات رؤية LLM
                get_ad_insight_btn: "✨ رؤية أداء الإعلانات ✨",
                llm_insight_title: "رؤية أداء الإعلانات",
                llm_insight_placeholder: "انقر على الزر أعلاه للحصول على رؤية حول أداء إعلاناتك.",
                llm_insight_loading: "جاري تحليل أدائك... يرجى الانتظار",
                llm_insight_error: "عذرًا، حدث خطأ أثناء جلب الرؤية. يرجى المحاولة مرة أخرى.",
                llm_insight_no_id: "غير قادر على إنشاء رابط الإحالة: معرف مستخدم تيليجرام غير متاح. يرجى فتح التطبيق عبر زر البوت في تيليجرام.",
            },
            en: {
                app_title: "⛏️Enable Auto Watch, Go to Sleep 😴, and Enjoy the Profits🤫💵", 
                earn_per_click_message: "Earn 5 Pepe coins per click🔥", 
                min_withdrawal_message_static_general: `Withdrawal via FaucetPay from ${MIN_WITHDRAW_POINTS_FAUCETPAY} pepe coins only ✅\nWithdrawal to Any Other Wallet from ${MIN_WITHDRAW_POINTS} pepe coins only ✅`, 
                watched_ads_label: "Watched Ads",
                earned_points_label: "Earned Pepe Coins", 
                daily_limit_label: "Daily Views", 
                progress_to_bonus: "Progress to Bonus",
                ad_type_label: "Adsgram Interstitial Ad",
                watch_ad_btn_with_points: `Watch Ad (+${POINTS_PER_AD.toFixed(2)} Pepe Coins)`, 
                auto_show_ads_btn: "Auto Show Ads",
                stop_auto_ads_btn: "Stop Auto Ads",
                withdraw_points_btn: "Withdraw Pepe Coins", 
                visit_channel_title: "Visit Our Telegram Channel", 
                visit_channel_button: "Visit Channel", 
                footer_text: "Secured by Firebase • All transactions are protected",
                withdrawal_request_title: "Withdrawal Request",
                withdrawal_warning: `Warning 🙋🏻‍♂️\nMinimum withdrawal for FaucetPay is ${MIN_WITHDRAW_POINTS_FAUCETPAY} pepe coins.\nMinimum withdrawal for Any Other Wallet is ${MIN_WITHDRAW_POINTS} pepe coins.\nPlease ensure you enter a correct wallet address for smooth withdrawals (◍•ᴗ•◍)`, 
                enter_points_placeholder: "Enter Amount to Withdraw Pepe Coins", 
                faucetpay_option: "FaucetPay",
                other_wallet_option: "Withdraw to Any Other Wallet",
                wallet_address_placeholder: "Enter Wallet Address",
                withdraw_button: "Withdraw",
                ad_loading: "Loading ad... Please wait",
                ad_completed_success: `Ad completed! +${POINTS_PER_AD.toFixed(2)} Pepe Coins added to your account`, 
                ad_failed: "Failed to show ad. Please try again.",
                auto_ads_started_notification: "Auto ads started. Ads will play every 30 seconds.",
                auto_ads_stopped_notification: "Auto ads stopped.",
                daily_limit_reached: `You have reached the daily ad limit (${DAILY_AD_LIMIT}). Please try again tomorrow.`, 
                min_withdraw_message: `Minimum withdrawal for {methodName} is {minAmount} pepe coins.`, 
                insufficient_balance: `Insufficient balance. You have {earnedPoints} Pepe Coins.`, 
                enter_wallet_address: "Please enter the wallet address.",
                withdrawal_success_message: 'Withdrawal request sent successfully!',
                telegram_send_fail: `Failed to send request: {error}`,
                telegram_connect_error: `Error connecting to Telegram service: {error}`,
                unknown_method: "Unknown method:",
                // Referral system translations
                referral_title: "Referral System",
                referral_desc: `Invite your friends and earn ${REFERRAL_BONUS_AMOUNT.toFixed(2)} pepe coins when they watch their first ${REFERRAL_BONUS_ADS_COUNT} ads!`,
                copy_link_btn: "Copy Link",
                copy_link_success: "Referral link copied!",
                referred_users_label: "Referred Users",
                referral_bonus_earned_label: "Referral Bonus Earned",
                user_id_display: "User ID: {userId}",
                referral_link_loading: "Loading referral link...",
                // LLM Insight translations
                get_ad_insight_btn: "✨ Get Ad Performance Insight ✨",
                llm_insight_title: "Ad Performance Insight",
                llm_insight_placeholder: "Click the button above to get insight into your ad performance.",
                llm_insight_loading: "Analyzing your performance... Please wait",
                llm_insight_error: "Sorry, an error occurred while fetching insight. Please try again.",
                llm_insight_no_id: "Cannot generate referral link: Telegram user ID not available. Please open the app via the bot button in Telegram.",
            },
            ru: {
                app_title: "⛏️Включи автопросмотр и иди спать 😴, наслаждайся прибылью🤫💵", 
                earn_per_click_message: "Заработайте 5 монет Pepe за клик🔥", 
                min_withdrawal_message_static_general: `Вывод через FaucetPay от ${MIN_WITHDRAW_POINTS_FAUCETPAY} монет pepe только ✅\nВывод на любой другой кошелек от ${MIN_WITHDRAW_POINTS} монет pepe только ✅`, 
                watched_ads_label: "Просмотрено объявлений",
                earned_points_label: "Заработанные монеты Pepe", 
                daily_limit_label: "Ежедневные просмотры", 
                progress_to_bonus: "Прогресс к бонусу",
                ad_type_label: "Межстраничная реклама Adsgram",
                watch_ad_btn_with_points: `Смотреть рекламу (+${POINTS_PER_AD.toFixed(2)} монет Pepe)`, 
                auto_show_ads_btn: "Автоматический показ рекламы",
                stop_auto_ads_btn: "Остановить автопоказ",
                withdraw_points_btn: "Вывести монеты Pepe", 
                visit_channel_title: "Посетите наш Telegram-канал", 
                visit_channel_button: "Посетить канал", 
                footer_text: "Защищено Firebase • Все транзакции защищены",
                withdrawal_request_title: "Запрос на вывод",
                withdrawal_warning: `Внимание 🙋🏻‍♂️\nМинимальная сумма вывода для FaucetPay составляет ${MIN_WITHDRAW_POINTS_FAUCETPAY} монет pepe.\nМинимальная сумма вывода для любого другого кошелька составляет ${MIN_WITHDRAW_POINTS} монет pepe.\nПожалуйста, убедитесь, что вы ввели правильный адрес кошелька для беспроблемного вывода средств (◍•ᴗ•◍)`, 
                enter_points_placeholder: "Введите сумму для вывода монет Pepe", 
                faucetpay_option: "FaucetPay",
                other_wallet_option: "Вывод на любой другой кошелек",
                wallet_address_placeholder: "Введите адрес кошелька",
                withdraw_button: "Вывести",
                ad_loading: "Загрузка рекламы... Пожалуйста, подождите",
                ad_completed_success: `Реклама завершена! +${POINTS_PER_AD.toFixed(2)} монет Pepe добавлено на ваш счет`, 
                ad_failed: "Не удалось показать рекламу. Пожалуйста, попробуйте еще раз.",
                auto_ads_started_notification: "Автоматический показ рекламы запущен. Реклама будет воспроизводиться каждые 30 секунд.",
                auto_ads_stopped_notification: "Остановить автопоказ.",
                daily_limit_reached: `Вы достигли дневного лимита по рекламе (${DAILY_AD_LIMIT}). Пожалуйста, попробуйте завтра.`, 
                min_withdraw_message: `Минимальная сумма вывода для {methodName} составляет {minAmount} монет pepe.`, 
                insufficient_balance: `Недостаточный баланс. У вас {earnedPoints} монет pepe.`, 
                enter_wallet_address: "Пожалуйста, введите адрес кошелька.",
                withdrawal_success_message: 'Запрос на вывод успешно отправлен!',
                telegram_send_fail: `Не удалось отправить запрос: {error}`,
                telegram_connect_error: `Ошибка подключения к служDбе Telegram: {error}`,
                unknown_method: "Неизвестный метод:",
                // Referral system translations
                referral_title: "Реферальная система",
                referral_desc: `Приглашайте друзей и зарабатывайте ${REFERRAL_BONUS_AMOUNT.toFixed(2)} монет pepe, когда они посмотрят свои первые ${REFERRAL_BONUS_ADS_COUNT} объявлений!`,
                copy_link_btn: "Скопировать ссылку",
                copy_link_success: "Реферальная ссылка скопирована!",
                referred_users_label: "Приглашенные пользователи",
                referral_bonus_earned_label: "Заработано по реферальной программе",
                user_id_display: "Идентификатор пользователя: {userId}",
                referral_link_loading: "Загрузка реферальной ссылки...",
                // LLM Insight translations
                get_ad_insight_btn: "✨ Получить информацию о производительности рекламы ✨",
                llm_insight_title: "Анализ эффективности рекламы",
                llm_insight_placeholder: "Нажмите кнопку выше, чтобы получить информацию о вашей рекламной кампании.",
                llm_insight_loading: "Анализ вашей производительности... Пожалуйста, подождите",
                llm_insight_error: "Извините, произошла ошибка при получении информации. Пожалуйста, попробуйте еще раз.",
                llm_insight_no_id: "Невозможно сгенерировать реферальную ссылку: идентификатор пользователя Telegram недоступен. Пожалуйста, откройте приложение через кнопку бота в Telegram.",
            }
        };

        let currentLanguage = localStorage.getItem('appLanguage') || 'ar'; // الافتراضي هو العربية
        let appInitialized = false; // علامة لمنع التهيئة المتعددة

        // دالة للحصول على تاريخ اليوم بتنسيق YYYY-MM-DD
        function getTodayDate() {
            const today = new Date();
            const year = today.getFullYear();
            const month = String(today.getMonth() + 1).padStart(2, '0'); // الأشهر تبدأ من 0
            const day = String(today.getDate()).padStart(2, '0');
            return `${year}-${month}-${day}`;
        }

        // دالة لتعيين اللغة
        window.setLanguage = function(lang) {
            currentLanguage = lang;
            localStorage.setItem('appLanguage', lang);
            document.documentElement.lang = lang; // تعيين سمة HTML lang

            // تحديث نمط الزر النشط
            document.querySelectorAll('.language-selector button').forEach(button => {
                if (button.dataset.lang === lang) {
                    button.classList.add('active');
                } else {
                    button.classList.remove('active');
                }
            });

            // ترجمة جميع العناصر ذات سمة data-key
            document.querySelectorAll('[data-key]').forEach(element => {
                const key = element.dataset.key;
                if (translations[lang] && translations[lang][key]) {
                    if (element.tagName === 'INPUT' && element.hasAttribute('data-key-placeholder')) {
                        element.placeholder = translations[lang][key];
                    } else if (key === 'watch_ad_btn_with_points' || key === 'ad_completed_success') {
                         element.textContent = translations[lang][key];
                    } else if (key === 'daily_limit_reached') { 
                        element.textContent = translations[lang][key].replace(`(${DAILY_AD_LIMIT})`, `(${DAILY_AD_LIMIT})`); 
                    } else if (key === 'insufficient_balance') {
                        element.textContent = translations[lang][key].replace('{earnedPoints}', currentUserData.earnedPoints.toFixed(2));
                    } else if (key === 'min_withdrawal_message') { // التعامل مع الرسالة الديناميكية min_withdrawal_message
                        // هذه الترجمة يتم التعامل معها داخل withdrawPoints لتكون ديناميكية
                        // لذا لا نقم بتعيينها مباشرة هنا
                    }
                    else {
                        element.textContent = translations[lang][key];
                    }
                }
            });

            // ترجمة جميع العناصر ذات سمة data-key-placeholder
            document.querySelectorAll('[data-key-placeholder]').forEach(element => {
                const placeholderKey = element.dataset.keyPlaceholder;
                if (translations[lang] && translations[lang][placeholderKey]) {
                    element.placeholder = translations[lang][placeholderKey];
                }
            });

            // ترجمة الخيارات في القوائم المنسدلة
            document.querySelectorAll('#payment-method option').forEach(option => {
                const key = option.dataset.key;
                if (translations[lang] && translations[lang][key]) {
                    option.textContent = translations[lang][key];
                }
            });

            // تحديث الرسائل المحددة ديناميكياً
            // يتم تعيين referral_desc ديناميكياً
            const referralDescEl = document.querySelector('[data-key="referral_desc"]');
            if (referralDescEl) {
                referralDescEl.textContent = translations[lang].referral_desc;
            }
            // عرض معرف المستخدم
            if (currentUserData.telegramUserId) {
                userIdDisplayEl.textContent = translations[currentLanguage].user_id_display.replace('{userId}', currentUserData.telegramUserId);
            } else if (firebaseCurrentUserId) { // بديل إذا لم يكن تطبيق تيليجرام المصغر (معرف Firebase Auth)
                 userIdDisplayEl.textContent = translations[currentLanguage].user_id_display.replace('{userId}', firebaseCurrentUserId);
            } else {
                 userIdDisplayEl.textContent = translations[currentLanguage].user_id_display.replace('{userId}', "N/A"); // أو إخفاء هذا العنصر
            }


            // إعادة عرض المحتوى الديناميكي (مثل الأرقام)
            updateUI();
            showAdNotification(''); 
            withdrawStatusEl.textContent = ''; 
        };

        // دالة تهيئة التطبيق الرئيسية
        async function initApp() {
            if (appInitialized) return; // منع التهيئة المتعددة
            appInitialized = true;
            console.log("initApp: بدء تهيئة التطبيق.");

            // 1. الحصول على بيانات تطبيق تيليجرام المصغر (إذا كان قابلاً للتطبيق)
            if (window.Telegram && window.Telegram.WebApp) {
                const tgInitData = window.Telegram.WebApp.initDataUnsafe;
                console.log("initApp: Telegram WebApp initDataUnsafe:", tgInitData);
                if (tgInitData && tgInitData.user) {
                    currentUserData.telegramUserId = String(tgInitData.user.id);
                    currentUserData.telegramUsername = tgInitData.user.username || tgInitData.user.first_name || 'Anonymous';
                    console.log("initApp: تم تعيين معرف مستخدم تيليجرام واسم المستخدم من initDataUnsafe:", currentUserData.telegramUserId, currentUserData.telegramUsername);

                    // إذا كان معرف المحيل موجوداً في start_param
                    if (tgInitData.start_param) {
                        const referrerId = tgInitData.start_param;
                        if (referrerId !== currentUserData.telegramUserId) { // لا يمكن الإحالة للنفس
                            currentUserData.referrerId = referrerId;
                            console.log("initApp: تمت الإحالة بواسطة:", referrerId);
                        }
                    }
                } else {
                    console.warn("initApp: Telegram WebApp initDataUnsafe.user غير متاح. تأكد من فتح التطبيق عبر بوت تيليجرام.");
                }
            } else {
                 console.warn("initApp: لم يتم الكشف عن حزمة SDK لتطبيق تيليجرام المصغر. قد يتم تشغيل التطبيق كصفحة ويب مستقلة.");
            }

            // 2. تحديد معرف المستخدم الفريد لـ Firestore
            // الأولوية لمعرف مستخدم تيليجرام إذا كان متاحاً، وإلا فمعرف Firebase Auth
            const userIdForFirestore = currentUserData.telegramUserId || firebaseCurrentUserId;
            console.log("initApp: تم تحديد userIdForFirestore لعمليات Firestore:", userIdForFirestore);

            if (!userIdForFirestore) {
                console.error("initApp: لا يوجد معرف مستخدم صالح لـ Firestore. قد تفشل عمليات Firebase. قد يكون هذا بسبب فتح التطبيق خارج سياق تطبيق تيليجرام المصغر أو مشكلة مصادقة Firebase.");
                showAdNotification(translations[currentLanguage].llm_insight_no_id); // إبلاغ المستخدم بمشكلة المعرف
                // لا يزال بإمكاننا تحديث واجهة المستخدم بالقيم الافتراضية ومحاولة إنشاء رابط الإحالة
                updateUI(); 
                generateReferralLink(); // سيعرض هذا رسالة الخطأ في حقل الرابط
                return; // إيقاف المزيد من التهيئة المعتمدة على Firebase
            } 
            
            // 3. تحميل أو تهيئة بيانات المستخدم من Firestore
            if (isFirebaseInitialized) {
                const userDocRef = doc(firebaseDb, `artifacts/${appId}/users/${userIdForFirestore}/appData/userData`);
                console.log("initApp: محاولة جلب بيانات المستخدم من Firestore للمستند:", userDocRef.path);

                try {
                    const userDocSnap = await getDoc(userDocRef);

                    if (userDocSnap.exists()) {
                        // تحميل بيانات المستخدم الموجودة من Firestore
                        const data = userDocSnap.data();
                        currentUserData = { 
                            ...currentUserData, // الاحتفاظ بالمعلومات المستمدة من تيليجرام
                            ...data, // التراكب ببيانات Firestore (مثل النقاط، عدد الإعلانات المشاهدة، إلخ)
                            isNewUser: false // ليس مستخدمًا جديدًا إذا كان المستند موجوداً
                        };
                        console.log("initApp: تم تحميل بيانات المستخدم الموجودة من Firestore:", currentUserData);

                        // منطق إعادة الضبط اليومي (إذا كان يومًا جديدًا، إعادة تعيين عدد الإعلانات المشاهدة اليومية)
                        const todayDate = getTodayDate();
                        if (currentUserData.lastWatchDate !== todayDate) {
                            console.log("initApp: تم الكشف عن يوم جديد. إعادة تعيين عدد الإعلانات اليومية.");
                            currentUserData.dailyWatchedAdsCount = 0;
                            currentUserData.lastWatchDate = todayDate;
                            await setDoc(userDocRef, { dailyWatchedAdsCount: 0, lastWatchDate: todayDate }, { merge: true });
                        }

                    } else {
                        // مستخدم جديد: حفظ البيانات الأولية في Firestore
                        console.log("initApp: تم الكشف عن مستخدم جديد. حفظ البيانات الأولية في Firestore.");
                        // التأكد من تهيئة جميع الحقول حتى لو كانت بيانات initData من تيليجرام جزئية
                        currentUserData.watchedAdsCount = currentUserData.watchedAdsCount || 0;
                        currentUserData.earnedPoints = currentUserData.earnedPoints || 0.00;
                        currentUserData.dailyWatchedAdsCount = currentUserData.dailyWatchedAdsCount || 0;
                        currentUserData.lastWatchDate = getTodayDate();
                        currentUserData.isNewUser = true; // تأكيد المستخدم الجديد لمنطق مكافأة الإحالة
                        currentUserData.referredUsersCount = currentUserData.referredUsersCount || 0;
                        currentUserData.referralBonusEarned = currentUserData.referralBonusEarned || 0.00;
                        currentUserData.referredAdsWatched = currentUserData.referredAdsWatched || 0;
                        currentUserData.hasReceivedReferralBonusForThisUser = currentUserData.hasReceivedReferralBonusForThisUser || false; 

                        await setDoc(userDocRef, currentUserData);
                        console.log("initApp: تم حفظ بيانات المستخدم الأولية في Firestore.");
                    }

                } catch (error) {
                    console.error("initApp: خطأ في جلب/تعيين بيانات المستخدم من Firestore:", error);
                    showAdNotification("خطأ في تحميل بيانات المستخدم. قد تكون الوظائف محدودة. (خطأ Firebase)");
                    // بديل لـ localStorage (أقل موثوقية لتطبيقات Mini Apps)
                    if (localStorage.getItem('userData')) {
                        currentUserData = JSON.parse(localStorage.getItem('userData'));
                        console.warn("initApp: العودة إلى localStorage لبيانات المستخدم.");
                    }
                }
            } else {
                 console.warn("initApp: لم يتم تهيئة Firebase. تشغيل التطبيق بدون استمرارية البيانات (باستخدام localStorage كبديل إذا كان متاحاً).");
                 if (localStorage.getItem('userData')) {
                    currentUserData = JSON.parse(localStorage.getItem('userData'));
                 }
            }
            
            // 4. تحديثات واجهة المستخدم النهائية وإنشاء الرابط
            setLanguage(currentLanguage); // تطبيق إعدادات اللغة بعد تحميل بيانات المستخدم
            updateUI(); // تحديث واجهة المستخدم بالبيانات المحملة
            updateButtonStates(); // تعيين حالات الأزرار الأولية
            generateReferralLink(); // إنشاء رابط الإحالة بناءً على معرف المستخدم الآن بعد تحميل/تحديد البيانات
            console.log("initApp: تهيئة التطبيق كاملة.");
        }
        
        // تحديث عناصر واجهة المستخدم
        function updateUI() {
            watchedAdsEl.textContent = currentUserData.watchedAdsCount;
            earnedPointsEl.textContent = currentUserData.earnedPoints.toFixed(2);
            dailyWatchedAdsEl.textContent = `${currentUserData.dailyWatchedAdsCount} / ${DAILY_AD_LIMIT}`; 
            
            const progress = (currentUserData.watchedAdsCount % ADS_FOR_BONUS) / ADS_FOR_BONUS * 100;
            adsProgressEl.textContent = `${Math.round(progress)}%`;
            progressFillEl.style.width = `${progress}%`;
            
            // إضافة حركة عندما تتغير النقاط
            earnedPointsEl.classList.remove('pulse');
            void earnedPointsEl.offsetWidth; // تشغيل إعادة التدفق
            earnedPointsEl.classList.add('pulse');

            // تحديث واجهة مستخدم الإحالة
            referredUsersCountEl.textContent = currentUserData.referredUsersCount;
            referralBonusEarnedEl.textContent = currentUserData.referralBonusEarned.toFixed(2);
            
            // تحديث عرض معرف المستخدم
            if (currentUserData.telegramUserId) {
                userIdDisplayEl.textContent = translations[currentLanguage].user_id_display.replace('{userId}', currentUserData.telegramUserId);
            } else if (firebaseCurrentUserId) { // بديل إذا لم يكن تطبيق تيليجرام المصغر (معرف Firebase Auth)
                 userIdDisplayEl.textContent = translations[currentLanguage].user_id_display.replace('{userId}', firebaseCurrentUserId);
            } else {
                 userIdDisplayEl.textContent = translations[currentLanguage].user_id_display.replace('{userId}', "N/A"); // أو إخفاء هذا العنصر
            }


            updateButtonStates(); // التأكد من تحديث حالات الأزرار بعد تغييرات واجهة المستخدم
        }

        // حفظ بيانات المستخدم في Firestore
        async function saveUserDataToFirestore() {
            if (!isFirebaseInitialized || !firebaseCurrentUserId) {
                console.warn("saveUserDataToFirestore: لم يتم تهيئة Firebase أو لم يتم مصادقة المستخدم. لا يمكن الحفظ في Firestore. الحفظ في localStorage.");
                localStorage.setItem('userData', JSON.stringify(currentUserData)); // حفظ بديل (أقل موثوقية للأجهزة المتعددة)
                return;
            }
            // استخدام معرف مستخدم تيليجرام إذا كان متاحاً، وإلا فمعرف Firebase Auth
            const userIdToSave = currentUserData.telegramUserId || firebaseCurrentUserId;
            if (!userIdToSave) {
                 console.error("saveUserDataToFirestore: لا يمكن حفظ بيانات المستخدم: لم يتم العثور على معرف مستخدم صالح.");
                 return;
            }
            const userDocRef = doc(firebaseDb, `artifacts/${appId}/users/${userIdToSave}/appData/userData`);
            try {
                // استخدام `setDoc` مع `merge: true` لدمج البيانات الجديدة مع البيانات الموجودة
                await setDoc(userDocRef, currentUserData, { merge: true });
                console.log("saveUserDataToFirestore: تم حفظ بيانات المستخدم في Firestore بنجاح لـ:", userIdToSave);
            } catch (error) {
                console.error("saveUserDataToFirestore: خطأ في حفظ بيانات المستخدم في Firestore:", error);
                showAdNotification("خطأ في حفظ البيانات. يرجى التحقق من اتصالك.");
            }
        }
        
        // دالة لتحديث حالات تمكين/تعطيل الأزرار
        function updateButtonStates() {
            const limitReached = currentUserData.dailyWatchedAdsCount >= DAILY_AD_LIMIT;
            watchAdBtn.disabled = limitReached;
            autoAdBtn.disabled = limitReached; 
            
            if (limitReached) {
                // إذا تم الوصول إلى الحد الأقصى، تأكد من إيقاف الإعلانات التلقائية
                clearInterval(autoAdInterval);
                autoAdInterval = null; // مسح معرف الفاصل الزمني
                stopAutoBtn.disabled = true; 
            } else {
                stopAutoBtn.disabled = !autoAdInterval; 
            }
        }
        
        // دالة مشاهدة الإعلان باستخدام Adsgram
        async function watchAd() {
            if (currentUserData.dailyWatchedAdsCount >= DAILY_AD_LIMIT) {
                showAdNotification(translations[currentLanguage].daily_limit_reached);
                return; 
            }

            showAdNotification(translations[currentLanguage].ad_loading);
            
            try {
                console.log("watchAd: محاولة عرض إعلان Adsgram...");
                if (typeof window.Adsgram !== 'undefined' && typeof window.Adsgram.init === 'function') {
                    await window.Adsgram.init({ blockId: "12082" }).show(); 
                    console.log("watchAd: تم عرض إعلان Adsgram بنجاح."); 
                    
                    currentUserData.watchedAdsCount++;
                    currentUserData.earnedPoints += POINTS_PER_AD; 
                    currentUserData.dailyWatchedAdsCount++; 

                    // تحديث تاريخ آخر مشاهدة لليوم الحالي
                    currentUserData.lastWatchDate = getTodayDate();
                    
                    if (currentUserData.watchedAdsCount % ADS_FOR_BONUS === 0) {
                        currentUserData.earnedPoints += 1.00; // نقطة إضافية
                    }

                    // منطق مكافأة الإحالة: التحقق مما إذا كان هذا المستخدم المحال يؤهل محيله للحصول على مكافأة
                    if (currentUserData.referrerId && currentUserData.isNewUser) { // فقط للمستخدمين المحالين الجدد
                        currentUserData.referredAdsWatched = (currentUserData.referredAdsWatched || 0) + 1; // زيادة عدد الإعلانات التي شاهدها هذا المستخدم المحال

                        if (currentUserData.referredAdsWatched >= REFERRAL_BONUS_ADS_COUNT && !currentUserData.hasReceivedReferralBonusForThisUser) {
                            console.log(`watchAd: المستخدم المحال ${currentUserData.telegramUserId} شاهد ${REFERRAL_BONUS_ADS_COUNT} إعلان. منح مكافأة للمحيل.`);
                            
                            // الحصول على بيانات المحيل وتحديث نقاطه
                            // استخدم مثيل firebaseDb من نطاق السكربت الرئيسي
                            const referrerDocRef = doc(firebaseDb, `artifacts/${appId}/users/${currentUserData.referrerId}/appData/userData`);
                            const referrerDocSnap = await getDoc(referrerDocRef);
                            
                            if (referrerDocSnap.exists()) {
                                const referrerData = referrerDocSnap.data();
                                const newReferrerPoints = (referrerData.earnedPoints || 0) + REFERRAL_BONUS_AMOUNT;
                                const newReferralBonusEarned = (referrerData.referralBonusEarned || 0) + REFERRAL_BONUS_AMOUNT;
                                
                                await updateDoc(referrerDocRef, {
                                    earnedPoints: newReferrerPoints,
                                    referralBonusEarned: newReferralBonusEarned
                                });
                                console.log(`watchAd: تم منح المحيل ${currentUserData.referrerId} ${REFERRAL_BONUS_AMOUNT} عملة pepe.`);
                                
                                // وضع علامة على أن المكافأة تم استلامها لهذا المستخدم المحال
                                currentUserData.hasReceivedReferralBonusForThisUser = true;
                                
                                // زيادة عدد المستخدمين المحالين للمحيل أيضًا إذا كانت هذه هي المكافأة الأولى من هذا المستخدم المحال المحدد
                                if ((referrerData.referredUsersCount || 0) === (referrerDocSnap.data().referredUsersCount || 0)) { 
                                    await updateDoc(referrerDocRef, { referredUsersCount: (referrerData.referredUsersCount || 0) + 1 });
                                }
                            } else {
                                console.warn(`watchAd: لم يتم العثور على المحيل ${currentUserData.referrerId} في Firestore.`);
                            }
                        }
                    }
                    
                    await saveUserDataToFirestore(); // حفظ بيانات المستخدم المحدثة في Firestore
                    updateUI(); 
                    
                    showAdNotification(translations[currentLanguage].ad_completed_success);
                } else {
                    console.error("watchAd: حزمة Adsgram SDK غير متاحة عند محاولة عرض الإعلان.");
                    showAdNotification(translations[currentLanguage].ad_failed); 
                }

            } catch (error) {
                console.error("watchAd: فشل عرض إعلان Adsgram أو حدث خطأ:", error);
                showAdNotification(translations[currentLanguage].ad_failed);
            }
        }
        
        // عرض الإعلانات تلقائياً 
        function startAutoAds() {
            if (currentUserData.dailyWatchedAdsCount >= DAILY_AD_LIMIT) {
                showAdNotification(translations[currentLanguage].daily_limit_reached);
                return;
            }
            if (autoAdInterval) {
                clearInterval(autoAdInterval);
            }
            autoAdInterval = setInterval(watchAd, 30000); 
            autoAdBtn.disabled = true; 
            stopAutoBtn.disabled = false; 
            showAdNotification(translations[currentLanguage].auto_ads_started_notification);
        }
        
        function stopAutoAds() {
            clearInterval(autoAdInterval);
            autoAdInterval = null; 
            autoAdBtn.disabled = false; 
            stopAutoBtn.disabled = true; 
            showAdNotification(translations[currentLanguage].auto_ads_stopped_notification);
        }
        
        // عرض إشعار الإعلان
        function showAdNotification(message) {
            adNotificationEl.textContent = message;
            adNotificationEl.style.display = 'block';
            
            setTimeout(() => {
                adNotificationEl.style.display = 'none';
            }, 3000);
        }

        // دالة لإظهار نموذج السحب
        function showWithdrawForm() {
            withdrawSectionEl.style.display = 'block';
        }

        // دالة للتعامل مع السحب
        async function withdrawPoints() {
            const amount = parseFloat(document.getElementById('withdraw-amount').value);
            const paymentMethod = document.getElementById('payment-method').value; 
            const walletAddress = document.getElementById('wallet-address').value; 

            let minRequiredPoints;
            let methodName;

            if (paymentMethod === 'faucetpay') {
                minRequiredPoints = MIN_WITHDRAW_POINTS_FAUCETPAY;
                methodName = translations[currentLanguage].faucetpay_option;
            } else { 
                minRequiredPoints = MIN_WITHDRAW_POINTS;
                methodName = translations[currentLanguage].other_wallet_option;
            }

            if (isNaN(amount) || amount < minRequiredPoints) {
                let message = translations[currentLanguage].min_withdraw_message
                    .replace('{methodName}', methodName)
                    .replace('{minAmount}', minRequiredPoints);
                showTemporaryMessage(message, 'red');
                return;
            }

            if (amount > currentUserData.earnedPoints) {
                let message = translations[currentLanguage].insufficient_balance.replace('{earnedPoints}', currentUserData.earnedPoints.toFixed(2));
                showTemporaryMessage(message, 'red');
                return;
            }

            if (!walletAddress.trim()) { 
                showTemporaryMessage(translations[currentLanguage].enter_wallet_address, 'red');
                return;
            }

            // خصم النقاط محلياً أولاً
            currentUserData.earnedPoints -= amount;
            await saveUserDataToFirestore(); // حفظ النقاط المحدثة في Firestore
            updateUI(); 

            // إنشاء رسالة تيليجرام للمسؤول، بما في ذلك اسم مستخدم تيليجرام الفعلي
            let messageToAdmin = `New Withdrawal Request:\n`;
            if (currentUserData.telegramUsername && currentUserData.telegramUserId) {
                messageToAdmin += `User: @${currentUserData.telegramUsername} (ID: ${currentUserData.telegramUserId})\n`;
            } else {
                 messageToAdmin += `User ID: ${currentUserData.telegramUserId || firebaseCurrentUserId} (No Telegram Username/ID from Mini App)\n`;
            }
            messageToAdmin += `Amount: ${amount} pepe coins\nPayment Method: ${methodName}\nWallet Address: ${walletAddress}`;
            
            sendWithdrawRequestToAdmin(messageToAdmin); 

            showTemporaryMessage(translations[currentLanguage].withdrawal_success_message, 'green');

            document.getElementById('withdraw-amount').value = '';
            document.getElementById('wallet-address').value = '';
        }

        // دالة لإرسال طلب السحب إلى المسؤول عبر تيليجرام
        function sendWithdrawRequestToAdmin(message) {
            fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage?chat_id=${ADMIN_USER_ID}&text=${encodeURIComponent(message)}`)
                .then(response => response.json())
                .then(data => {
                    if (data.ok) {
                        console.log('تم إرسال الرسالة إلى المسؤول');
                    } else {
                        console.error('فشل إرسال الرسالة إلى تيليجرام:', data.description || data);
                        let errorMessage = translations[currentLanguage].telegram_send_fail.replace('{error}', data.description || data);
                        showTemporaryMessage(errorMessage, 'red');
                    }
                })
                .catch(error => {
                    console.error('خطأ أثناء جلب API تيليجرام:', error);
                    let errorMessage = translations[currentLanguage].telegram_connect_error.replace('{error}', error.message);
                    showTemporaryMessage(errorMessage, 'red');
                });
        }

        // أداة لعرض الرسائل المؤقتة
        let messageTimeout;
        function showTemporaryMessage(msg, color) {
            withdrawStatusEl.textContent = msg;
            withdrawStatusEl.style.color = color;
            clearTimeout(messageTimeout);
            messageTimeout = setTimeout(() => {
                withdrawStatusEl.textContent = '';
            }, 5000); 
        }

        // وظائف نظام الإحالة
        async function generateReferralLink() {
            // إعادة التحقق من telegramUserId، يجب أن يكون متاحًا الآن بعد initApp، ولكن للاحتياط
            if (!currentUserData.telegramUserId && window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.initDataUnsafe && window.Telegram.WebApp.initDataUnsafe.user) {
                currentUserData.telegramUserId = String(window.Telegram.WebApp.initDataUnsafe.user.id);
                currentUserData.telegramUsername = window.Telegram.WebApp.initDataUnsafe.user.username || window.Telegram.WebApp.initDataUnsafe.user.first_name || 'Anonymous';
                console.log("generateReferralLink: تم تعيين معرف مستخدم تيليجرام (فحص متأخر):", currentUserData.telegramUserId);
            }

            const userIdForLink = currentUserData.telegramUserId; // أولوية معرف تيليجرام لرابط الإحالة

            if (userIdForLink) {
                const referralLink = `https://t.me/${BOT_USERNAME}?start=${userIdForLink}`;
                referralLinkInput.value = referralLink;
                console.log("generateReferralLink: تم إنشاء رابط الإحالة:", referralLink);
            } else {
                referralLinkInput.value = translations[currentLanguage].llm_insight_no_id; // إبلاغ المستخدم لماذا الرابط غير متاح
                console.warn("generateReferralLink: لا يمكن إنشاء رابط الإحالة: معرف مستخدم تيليجرام غير متاح. قد يكون المستخدم يعرض خارج سياق التطبيق المصغر.");
            }
        }


        function copyReferralLink() {
            referralLinkInput.select();
            document.execCommand('copy');
            showAdNotification(translations[currentLanguage].copy_link_success);
        }

        // --- دالة رؤية أداء LLM الجديدة ---
        async function getAdInsight() {
            getInsightBtn.disabled = true; // تعطيل الزر أثناء الطلب
            dogsInsightTextEl.textContent = translations[currentLanguage].llm_insight_loading;
            dogsInsightTextEl.classList.add('loading'); // إضافة حركة تحميل

            const prompt = `أنا مستخدم في تطبيق لمشاهدة الإعلانات لكسب العملات المشفرة. لقد شاهدت ${currentUserData.watchedAdsCount} إعلانًا وربحت ${currentUserData.earnedPoints.toFixed(2)} عملة Pepe. أرجو أن تقدم لي رؤية موجزة وتشجيعية حول أدائي، أو نصيحة بسيطة لتحسينه. تحدث بلهجة ودودة ومشجعة، وكأنك مساعد شخصي. اجعل الإجابة مختصرة ومباشرة، لا تزيد عن 50 كلمة.`;

            // استدعاء Gemini API
            try {
                let chatHistory = [];
                chatHistory.push({ role: "user", parts: [{ text: prompt }] });
                const payload = { contents: chatHistory };
                const apiKey = ""; // سيتم توفيرها بواسطة Canvas في وقت التشغيل
                const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });
                
                const result = await response.json();
                
                if (result.candidates && result.candidates.length > 0 &&
                    result.candidates[0].content && result.candidates[0].content.parts &&
                    result.candidates[0].content.parts.length > 0) {
                    const text = result.candidates[0].content.parts[0].text;
                    dogsInsightTextEl.textContent = text;
                    dogsInsightTextEl.classList.remove('loading');
                } else {
                    dogsInsightTextEl.textContent = translations[currentLanguage].llm_insight_error;
                    dogsInsightTextEl.classList.remove('loading');
                    console.error("هيكل استجابة LLM غير متوقع:", result);
                }
            } catch (error) {
                dogsInsightTextEl.textContent = translations[currentLanguage].llm_insight_error;
                dogsInsightTextEl.classList.remove('loading');
                console.error("خطأ في استدعاء Gemini API:", error);
            } finally {
                getInsightBtn.disabled = false; // إعادة تمكين الزر
            }
        }


        // تهيئة حزمة Telegram Mini App SDK (يتم استدعاء هذه دائماً)
        if (window.Telegram && window.Telegram.WebApp) {
            Telegram.WebApp.ready();
            Telegram.WebApp.expand(); // توسيع التطبيق المصغر إلى وضع ملء الشاشة
            console.log("تم تهيئة Telegram WebApp SDK.");
        } else {
            console.warn("لم يتم الكشف عن حزمة Telegram WebApp SDK. يتم تشغيل التطبيق كصفحة ويب مستقلة.");
        }

        // تهيئة Firebase وبدء منطق التطبيق (هذا الآن يتعامل مع سلوك window.onload)
        // تحل هذه الكتلة محل window.onload السابقة وتهيئة Firebase المكررة
        if (Object.keys(firebaseConfig).length > 0) {
            firebaseApp = initializeApp(firebaseConfig);
            firebaseDb = getFirestore(firebaseApp);
            firebaseAuth = getAuth(firebaseApp);
            isFirebaseInitialized = true;
            console.log("تم تهيئة Firebase (كتلة سكربت واحدة).");

            onAuthStateChanged(firebaseAuth, async (user) => {
                if (user) {
                    firebaseCurrentUserId = user.uid;
                    console.log("تم حل حالة مصادقة Firebase: المستخدم مسجل الدخول:", firebaseCurrentUserId);
                } else {
                    firebaseCurrentUserId = null;
                    console.log("تم حل حالة مصادقة Firebase: لا يوجد مستخدم مسجل الدخول.");
                    // بديل للمستخدم المجهول إذا أصبحت حالة المصادقة فارغة (على سبيل المثال، التحميل الأولي بدون توكن)
                    signInAnonymously(firebaseAuth).then(userCredential => {
                        firebaseCurrentUserId = userCredential.user.uid;
                        console.log("تم تسجيل الدخول كمجهول (من بديل onAuthStateChanged).", firebaseCurrentUserId);
                    }).catch(err => console.error("فشل تسجيل الدخول كمجهول (بديل onAuthStateChanged):", err));
                }
                // استدعاء initApp مرة واحدة فقط بعد تحديد حالة مصادقة Firebase
                if (!appInitialized) { // التأكد من استدعاء initApp مرة واحدة فقط
                    initApp();
                }
            });

            // محاولة تسجيل الدخول باستخدام توكن مخصص إذا تم توفيره (من بيانات initData لتطبيق تيليجرام المصغر)
            // يحدث هذا قبل أن يتم تشغيل onAuthStateChanged عادة لأول مرة
            if (initialAuthToken) {
                signInWithCustomToken(firebaseAuth, initialAuthToken)
                    .then((userCredential) => {
                        console.log("تم تسجيل الدخول باستخدام توكن مخصص بنجاح:", userCredential.user.uid);
                    })
                    .catch((error) => {
                        console.error("خطأ في تسجيل الدخول باستخدام توكن مخصص:", error);
                        // إذا فشل التوكن المخصص، قم بتسجيل الدخول كمجهول كبديل
                        signInAnonymously(firebaseAuth).then(userCredential => console.log("تم تسجيل الدخول كمجهول (بديل من خطأ التوكن المخصص).", userCredential.user.uid)).catch(err => console.error("فشل تسجيل الدخول كمجهول (بديل من خطأ التوكن المخصص):", err));
                    });
            } else {
                // إذا لم يكن هناك توكن مخصص، قم بتسجيل الدخول كمجهول
                signInAnonymously(firebaseAuth)
                    .then((userCredential) => {
                        console.log("تم تسجيل الدخول كمجهول (لا يوجد توكن مخصص).", userCredential.user.uid);
                    })
                    .catch((error) => {
                        console.error("خطأ في تسجيل الدخول كمجهول (لا يوجد توكن مخصص):", error);
                    });
            }
        } else {
            console.error("لم يتم العثور على تهيئة Firebase. لن يتم تهيئة Firebase. سيتم تشغيل التطبيق بدون استمرارية.");
            isFirebaseInitialized = false;
            initApp(); // استدعاء initApp مباشرة إذا لم يتم تهيئة Firebase
        }

        // تعيين اللغة الأولية فوراً، ثم ستقوم initApp بتحسينها بعد تحميل البيانات
        setLanguage(currentLanguage);

    </script>
</body>
</html>
